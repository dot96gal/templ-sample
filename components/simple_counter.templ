package components

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"net/url"
)

type SimpleCounterOperation string

const (
	SIMPLE_COUNTER_OPERATION_KEY  string                 = "operation"
	SIMPLE_COUNTER_OPERATION_UP   SimpleCounterOperation = "up"
	SIMPLE_COUNTER_OPERATION_DOWN SimpleCounterOperation = "down"
)

type SimpleCounterRequest struct {
	Operation SimpleCounterOperation `json:"operation"`
}

func ParseSimpleCounterRequest(values url.Values) SimpleCounterRequest {
	return SimpleCounterRequest{
		Operation: SimpleCounterOperation(
			values.Get(SIMPLE_COUNTER_OPERATION_KEY),
		),
	}
}

func NewSimpleCounterRequestJSON(operation SimpleCounterOperation) string {
	r := SimpleCounterRequest{
		Operation: operation,
	}

	b, err := json.Marshal(r)
	if err != nil {
		log.Fatal(err)
	}

	return string(b)
}

css simpleCounterCounterStyle() {
	display: grid;
	grid-template-areas: "count-indicator"
		"count-button-up"
		"count-button-down";
	justify-items: center;
	text-align: center;
	width: fit-content;
	padding: 24px;
	border: { fmt.Sprintf("1px solid %s", COLOR_BLACK_BLUE) };
	border-radius: 8px;
	background-color: { COLOR_WHITE };
}

css simpleCounterCountIndicatorStyle() {
	grid-area: count-indicator;
	font-size: 48px;
	font-weight: bold;
}

css simpleCounterCountButtonStyle() {
	width: 100%;
	margin-top: 16px;
	padding: 8px 16px;
	border: { fmt.Sprintf("1px solid %s", COLOR_BLACK_BLUE) };
	border-radius: 8px;
	background-color: { COLOR_WHITE };
	font-size: 16px;
	font-weight: bold;
	cursor: pointer;
}

css simpleCounterCountButtonUpStyle() {
	grid-area: count-button-up;
}

css simpleCounterCountButtonDownStyle() {
	grid-area: count-button-down;
}

type SimpleCounterIndicatorProps struct {
	Count int
}

templ SimpleCounterIndicator(props SimpleCounterIndicatorProps) {
	<div class={ simpleCounterCountIndicatorStyle() }>
		{ strconv.Itoa(props.Count) }
	</div>
}

type SimpleCounterButtonProps struct {
	CSSClasses  templ.CSSClasses
	HxPost      string
	HxVals      string
	HxTarget    string
	HxSwap      string
	DisplayName string
}

templ SimpleCounterButton(
	props SimpleCounterButtonProps,
) {
	<button
		class={ props.CSSClasses }
		hx-post={ props.HxPost }
		hx-vals={ props.HxVals }
		hx-target={ props.HxTarget }
		hx-swap={ props.HxSwap }
	>
		{ props.DisplayName }
	</button>
}

type SimpleCounterProps struct {
	Count      int
	Endpoint   string
	Attributes templ.Attributes
}

templ SimpleCounter(props SimpleCounterProps) {
	<div
		class={ simpleCounterCounterStyle() }
		{ props.Attributes... }
	>
		@SimpleCounterIndicator(
			SimpleCounterIndicatorProps{
				Count: props.Count,
			},
		)
		@SimpleCounterButton(
			SimpleCounterButtonProps{
				CSSClasses:  templ.CSSClasses{simpleCounterCountButtonStyle(), simpleCounterCountButtonUpStyle()},
				HxPost:      props.Endpoint,
				HxVals:      NewSimpleCounterRequestJSON(SIMPLE_COUNTER_OPERATION_UP),
				HxTarget:    fmt.Sprintf("previous .%s", simpleCounterCountIndicatorStyle().ClassName()),
				HxSwap:      "innerHTML",
				DisplayName: "Count Up",
			},
		)
		@SimpleCounterButton(
			SimpleCounterButtonProps{
				CSSClasses:  templ.CSSClasses{simpleCounterCountButtonStyle(), simpleCounterCountButtonDownStyle()},
				HxPost:      props.Endpoint,
				HxVals:      NewSimpleCounterRequestJSON(SIMPLE_COUNTER_OPERATION_DOWN),
				HxTarget:    fmt.Sprintf("previous .%s", simpleCounterCountIndicatorStyle().ClassName()),
				HxSwap:      "innerHTML",
				DisplayName: "Count Down",
			},
		)
	</div>
}
