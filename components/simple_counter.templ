package components

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"net/url"
)

type SimpleCounterOperation string

const (
	SIMPLE_COUNTER_OPERATION_KEY  string                 = "operation"
	SIMPLE_COUNTER_OPERATION_UP   SimpleCounterOperation = "up"
	SIMPLE_COUNTER_OPERATION_DOWN SimpleCounterOperation = "down"
)

type SimpleCounterRequest struct {
	Operation SimpleCounterOperation `json:"operation"`
}

func ParseSimpleCounterRequest(values url.Values) SimpleCounterRequest {
	return SimpleCounterRequest{
		Operation: SimpleCounterOperation(
			values.Get(SIMPLE_COUNTER_OPERATION_KEY),
		),
	}
}

func newSimpleCounterRequestJSON(operation SimpleCounterOperation) string {
	r := SimpleCounterRequest{
		Operation: operation,
	}

	b, err := json.Marshal(r)
	if err != nil {
		log.Fatal(err)
	}

	return string(b)
}

css simpleCounterCounterStyle() {
	display: grid;
	grid-template-areas: "count-indicator"
		"count-button-up"
		"count-button-down";
	justify-items: center;
	text-align: center;
	width: fit-content;
	padding: 24px;
	border: 1px solid #ccc;
	border-radius: 8px;
	background-color: #ffffff;
}

css simpleCounterCountIndicatorStyle() {
	grid-area: count-indicator;
	font-size: 48px;
	font-weight: bold;
}

css simpleCounterCountButtonStyle() {
	width: 100%;
	margin-top: 16px;
	padding: 8px 16px;
	border: 1px solid #ccc;
	border-radius: 8px;
	background-color: #ffffff;
	font-size: 16px;
	font-weight: bold;
	cursor: pointer;
}

css simpleCounterCountButtonUpStyle() {
	grid-area: count-button-up;
}

css simpleCounterCountButtonDownStyle() {
	grid-area: count-button-down;
}

templ SimpleCounterIndicator(count int) {
	{ strconv.Itoa(count) }
}

templ SimpleCounter(count int, handlePostPath string) {
	<div
		class={ simpleCounterCounterStyle() }
		data-testid="simple-counter-component"
	>
		<span
			class={ simpleCounterCountIndicatorStyle() }
		>
			@SimpleCounterIndicator(count)
		</span>
		<button
			class={ simpleCounterCountButtonStyle(), simpleCounterCountButtonUpStyle() }
			hx-post={ handlePostPath }
			hx-vals={ newSimpleCounterRequestJSON(SIMPLE_COUNTER_OPERATION_UP) }
			hx-target={ fmt.Sprintf("previous .%s", simpleCounterCountIndicatorStyle().ClassName()) }
			hx-swap="innerHTML"
		>
			Count Up
		</button>
		<button
			class={ simpleCounterCountButtonStyle(), simpleCounterCountButtonDownStyle() }
			hx-post={ handlePostPath }
			hx-vals={ newSimpleCounterRequestJSON(SIMPLE_COUNTER_OPERATION_DOWN) }
			hx-target={ fmt.Sprintf("previous .%s", simpleCounterCountIndicatorStyle().ClassName()) }
			hx-swap="innerHTML"
		>
			Count Down
		</button>
	</div>
}
