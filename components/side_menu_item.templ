package components

css sideMenuItemSelectedStyle() {
	background-color: rgb(75, 84, 98);
}

// [TODO] :hover疑似要素に対応したらリファクタリングする
const sideMenuItemHoverStyleClass = "menu-hover"

templ sideMenuItemHoverStyle(target string) {
	<style>
    .menu-hover:hover {
	    background-color: rgb(94, 102, 115)
    }
  </style>
}

type SideMenuItemProps struct {
	Icon templ.Component
	Text string
	Link string
	IsSelected bool
}

templ SideMenuItem(props SideMenuItemProps) {
	@IconLink(
		IconLinkProps{
			Icon: props.Icon,
			Text: props.Text,
			Link: props.Link,
			CSSClass: []templ.KeyValue[templ.CSSClass, bool]{
				templ.KV(sideMenuItemSelectedStyle(), props.IsSelected),
			},
			HoverStyleClass: sideMenuItemHoverStyleClass,
			HoverStyle: sideMenuItemHoverStyle(sideMenuItemHoverStyleClass),
		},	
	)
}

type SideMenuItemHomeProps struct {
	Link string
	IsSelected bool
}

templ SideMenuItemHome(props SideMenuItemHomeProps) {
	@SideMenuItem(
		SideMenuItemProps {
			Icon: IconHome(),
			Text: "home",
			Link: props.Link,
			IsSelected: props.IsSelected,
		},
	)

}

type SideMenuItemChartProps struct {
	Link string
	IsSelected bool
}

templ SideMenuItemChart(props SideMenuItemChartProps) {
	@SideMenuItem(
		SideMenuItemProps {
			Icon: IconChart(),
			Text: "chart",
			Link: props.Link,
			IsSelected: props.IsSelected,
		},
	)
}

type SideMenuItemTrendProps struct {
	Link string
	IsSelected bool
}


templ SideMenuItemTrend(props SideMenuItemTrendProps) {
	@SideMenuItem(
		SideMenuItemProps {
			Icon: IconTrend(),
			Text: "trend",
			Link: props.Link,
			IsSelected: props.IsSelected,
		},
	)
}
